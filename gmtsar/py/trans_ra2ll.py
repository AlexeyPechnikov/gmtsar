#!/usr/bin/env python3
# Alexey Pechnikov, Sep, 2021, https://github.com/mobigroup/gmtsar
# python3 -m pip install install xarray numpy scipy --upgrade
# trans_ra2ll - Transform trans.dat from Radar to Geographic Coordinates
#import pytest

def trans_ra2ll_matrix(in_trans_datafile, in_dem_gridfile, out_matrix_gridfile):
    from scipy.spatial import cKDTree
    import xarray as xr
    import numpy as np

    # trans.dat - file generated by llt_grid2rat (r a topo lon lat)"
    trans = np.fromfile(in_trans_datafile, dtype=np.float64).reshape([-1,5])
    lon_min, lon_max = trans[:,3].min(),trans[:,3].max()
    lat_min, lat_max = trans[:,4].min(),trans[:,4].max()

    dem = xr.open_dataset(in_dem_gridfile)
    assert 'lat' in dem.coords and 'lon' in dem.coords
    # define latlon array
    z_array_name = [data_var for data_var in dem.data_vars if len(dem.data_vars[data_var].coords)==2]
    assert len(z_array_name) == 1
    # extract the array and crop the grid to trans.dat file extent
    dem = dem[z_array_name[0]].sel(lon=slice(lon_min,lon_max), lat=slice(lat_min,lat_max))

    trans_latlons = np.stack([trans[:,4],trans[:,3]], axis=1)
    dem_lats, dem_lons = xr.broadcast(dem.lat,dem.lon)
    dem_latlons = np.stack([dem_lats.values.reshape(-1),dem_lons.values.reshape(-1)], axis=1)

    tree = cKDTree(trans_latlons, compact_nodes=False, balanced_tree=False)
    distance_limit = np.max([dem.lat.diff('lat')[0],dem.lon.diff('lon')[0]])
    d, inds = tree.query(dem_latlons, k = 1, distance_upper_bound=distance_limit, workers=8)

    # produce the same output array as dataset to be able to add global attributes
    trans_ra2ll = xr.zeros_like(dem).rename('trans_ra2ll')
    trans_ra2ll.values = np.where(~np.isinf(d), inds, -1).reshape(dem.shape)
    compression = dict(zlib=True, complevel=3, chunksizes=[512,512])
    # magic: add GMT attribute to prevent coordinates shift for 1/2 pixel
    trans_ra2ll.attrs['node_offset'] = np.int32(1)
    trans_ra2ll.to_netcdf(out_matrix_gridfile, encoding={'trans_ra2ll': compression})

def main():
    import sys

    if not len(sys.argv) == 4:
        print (f"Usage: {sys.argv[0]} trans.dat dem.grd trans_ra2ll.grd")
        exit(0)

    in_trans_datafile = sys.argv[1]
    in_dem_gridfile = sys.argv[2]
    out_matrix_gridfile = sys.argv[3]
    # calculate
    trans_ra2ll_matrix(in_trans_datafile, in_dem_gridfile, out_matrix_gridfile)

if __name__ == "__main__":
    # execute only if run as a script
    main()
